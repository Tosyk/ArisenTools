using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DDDAarclist
{
    class ExtensionHandler
    {
        public static string string_extension;
        public static int int_extension;

        // Notes:
        // some extensions use . (i.e. mem.wmv); replaced by _
        // namely: scv.xml, sdc.xml, mem.wmv, lcm.xml, sss.xml, mst.xml, are.xml, smx.xml
        // 'is' is a keyword, replaced by _is

        public enum Ext
        {
            gway = 0x25FA21CB,		// rAIWayPointGraph
            sdl = 0x4C0DB839,		// rScheduler
            stq = 0x167DBBFF,		// rSoundStreamRequest
            gmd = 0x242BB29A,		// rGUIMessage
            arc = 0x73850D05,		// rArchive
            spc = 0x7E33A16C,		// rSoundPackage
            sds = 0x0315E81F,		// rSoundDirectionalSet
            sky = 0x5EA7A3E9,		// rSky
            stc = 0x3E356F93,		// rStarCatalog
            gr2s = 0x628DFB41,		// rGrass2Setting
            srd = 0x2D12E086,		// rSoundRandom
            net = 0x46FDD725,		// rNetwork
            tex = 0x241F5DEB,		// rTexture
            lmt = 0x76820D81,		// rMotionList
            scv_xml = 0x592D804B,		// rSoundCurveXml
            sps = 0x7BEC319A,		// rSoundPhysicsSoftBody
            cld = 0x3D683C5B,		// rCloud
            spr = 0x1EB3767C,		// rSoundPhysicsRigidBody
            srq = 0x1BCC4966,		// rSoundRequest
            spj = 0x31EDC625,		// rSoundPhysicsJoint
            sdc_xml = 0x3A96D8A0,		// rSoundDirectionalCurveXml
            stex = 0x4323D83A,		// rSceneTexture
            rev = 0x232E228C,		// rSoundReverb
            _is = 0x7C832B6A,		// rImplicitSurface
            mod = 0x58A15856,		// rModel
            sbch = 0x6158A4A8,		// rCollisionHeightField
            rtex = 0x7808EA10,		// rRenderTargetTexture
            prp = 0x272B80EA,		// rPropParam
            gfd = 0x2D462600,		// rGUIFont
            gii = 0x07F768AF,		// rGUIIconInfo
            zon = 0x1B520B68,		// rZone
            ctc = 0x535D969F,		// rCnsTinyChain
            sew = 0x64A34520,		// rSoundSource
            sngw = 0x79C47B59,		// rSoundSourceADPCM
            envw = 0x255D51CD,		// rSoundSourceOggVorbis
            xsew = 0x7D1530C2,		// rSoundSourceMusic
            mem_wmv = 0x5F84F7C4,		// rMovieOnMemory
            wmv = 0x31F693D6,		// rMovieOnDisk
            scs = 0x0ECD7DF4,		// rSoundCurveSet
            equ = 0x2B40AE8F,		// rSoundEQ
            rdd = 0x52DBDCD6,		// rRagdoll
            chn = 0x3E363245,		// rChain
            ccl = 0x0026E7FF,		// rChainCol
            ik = 0x5A7FEA62,		// rCnsIK
            gui = 0x22948394,		// rGUI
            geo2 = 0x5175C242,		// rGeometry2
            vib = 0x358012E8,		// rVibration
            nav = 0x4EF19843,		// rNavigationMesh
            sbc = 0x51FC779F,		// rCollision
            fcp = 0x522F7A3D,		// rFacialPattern
            pcf = 0x6EE70EFF,		// rAIPathConsecutive
            fsl = 0x59EE2276,		// rAIFSMList
            rbd = 0x2A4F96A8,		// rRigidBody
            spl = 0x6FE1EA15,		// rSoundPhysicsList
            dwm = 0x69A5C538,		// rDeformWeightMap
            lcm = 0x39C52040,		// rCameraList
            lcm_xml = 0x78E8D875,		// rCameraListXml
            fbik_human = 0x7817FFA5,		// rFullbodyIKHuman
            mrl = 0x2749C8A8,		// rMaterial
            fca = 0x07B8BCDE,		// rFacialAnimation
            swm = 0x257D2F7C,		// rSwingModel
            e2d = 0x276DE8B7,		// rEffect2D
            efl = 0x6D5AE854,		// rEffectList
            sss_xml = 0x064A3AD8,		// rSoundSpeakerSetXml
            obc = 0x2350E584,		// rCollisionObj
            lim = 0x15B493A9,		// rCnsRotateLimit
            grs = 0x2739B57C,		// rGrass
            gpt = 0x6143E1BD,		// rGraphPatch
            mtx = 0x5F6A608B,		// rCnsMatrix
            tik = 0x526665B7,		// rCnsTinyIK
            jof = 0x4A06C178,		// rCnsJointOffset
            par = 0x1AD7410B,		// rCnsParent
            pan = 0x062C625E,		// rCnsParentN
            mst = 0x279D506C,		// rMetaSet
            mst_xml = 0x0330C7DF,		// rMetaSetXml
            scl = 0x4868DCCC,		// rCnsScaleNormalize
            lat = 0x6B02A7AF,		// rCnsLookAt
            ais = 0x31A91DA3,		// rAI
            ean = 0x4E397417,		// rEffectAnim
            efs = 0x02833703,		// rEffectStrip
            vts = 0x1AE50150,		// rVertices
            nls = 0x727C7279,		// rNulls
            grw = 0x0437BCF2,		// rGrassWind
            are = 0x31AB356C,		// rAIPathBase
            are_xml = 0x5400CD32,		// rAIPathBaseXml
            way = 0x5F36B659,		// rAIWayPoint
            hul = 0x1EF5E639,		// rConvexHull
            dpth = 0x7BBF5CB0,		// rAIDynamicLayout
            geog = 0x5E4DEF9D,		// rGeometry2Group
            geo3 = 0x2672F2D4,		// rGeometry3
            ddfcv = 0x534BF1A0,		// rDDFCurve
            ddfcv_v4 = 0x323BCB28,		// rDDFCurveVector4
            cit = 0x0E16DFBA,		// rItemCurseCnv
            irp = 0x169B7213,		// rItemRandParam
            cpl = 0x12C3BFA7,		// rCameraParamList
            ajp = 0x4046F1E1,		// rAdjustParam
            ahc = 0x5802B3FF,		// rAHCamera
            eap = 0x7AA81CAB,		// rAIEnemyActionParameter
            gop = 0x2B303957,		// rAIGoalPlanning
            AIPlActParam = 0x472022DF,		// rAIPlayerActionParameter
            pci = 0x079B5F3E,		// rAIPresetCharaInfo
            pcs = 0x7E1C8D43,		// rAIPresetStudy
            prt = 0x6D0115ED,		// rAIPriorityThink
            sn2 = 0x2052D67E,		// rAISensorExt
            stg = 0x7E4152FF,		// rAISensorTargetGroup
            sap = 0x089BEF2C,		// rAIStageActionParameter
            ahs = 0x754B82B4,		// rAreaHitShape
            amr = 0x3D97AD80,		// rArmorModel
            nmr = 0x15773620,		// rArmorModelNpc
            aor = 0x4FB35A95,		// rArmorPartsOff
            atr = 0x1C2B501F,		// rArmorTable
            ntr = 0x00FDA99B,		// rArmorTableNpc
            bll = 0x312607A4,		// rBlacklist
            bed = 0x36019854,		// rBodyEdit
            bap = 0x5B334013,		// rBowActParamList
            cql = 0x3A947AC1,		// rCameraQuakeList
            gce = 0x14428EAE,		// rCharacterEditPreset
            cmc = 0x6DB9FA5F,		// rCmcMsgConfig
            cnsshake = 0x456B6180,		// rCnsShake
            edc = 0x0BF8DC54,		// rEditConvert
            epd = 0x5F88B715,		// rEditPatternData
            edp = 0x32E2B13B,		// rEditPawn
            epv = 0x12191BA1,		// rEffectProvider
            esp = 0x33B21191,		// rEmShaderParam
            qlv = 0x64387FF1,		// rEquipLvUp
            fed = 0x5A61A7C8,		// rFaceEdit
            fpe = 0x4E44FB6D,		// rFacePartsEdit
            cpf = 0x1EDD03CA,		// rFollowCameraParam
            hed = 0x60BB6A09,		// rHumanEdit
            hpe = 0x0022FA09,		// rHumanPartsEdit
            FBIKParam = 0x63BDD8EE,		// rIKParam
            itemlv = 0x4509FA80,		// rItemLevelParam
            itl = 0x157388D3,		// rItemList
            imx = 0x3FB52996,		// rItemMix
            ist = 0x48538FFD,		// rItemSetTbl
            lot = 0x15302EF4,		// rLayout
            lgp = 0x563A6C74,		// rLayoutGroupParam
            gpl = 0x2A37242D,		// rLayoutGroupParamList
            lsp = 0x60DD1B16,		// rLayoutSpr
            mlb = 0x35A73F2B,		// rLineBuilder
            lku = 0x266E8A91,		// rLinkUnit
            ltg = 0x63B524A7,		// rLockOnTarget
            map = 0x2B0670A5,		// rMagicActParamList
            mia = 0x4B704CC0,		// rMagicItemActParamList
            mcp = 0x67156D41,		// rMapCapture
            mlm = 0x1823137D,		// rMapLndMarkPos
            msl = 0x48C0AF2D,		// rMsgSerial
            mss = 0x133917BA,		// rMsgSet
            nck = 0x1BA81D3C,		// rNeck
            nnl = 0x19054795,		// rNpcLedgerList
            ocl = 0x199C56C0,		// rObjCollision
            oml = 0x437662FC,		// rOmList
            olp = 0x069A1911,		// rOutlineParamList
            ablparam = 0x59D80140,		// rPlAbilityParam
            PlDefendParam = 0x0C4FCAE4,		// rPlDefendParam
            plexp = 0x0086B80F,		// rPlExp
            joblvl = 0x2CE309AB,		// rPlJobLevel
            pjp = 0x12688D38,		// rPlJumpParam
            lvl = 0x354284E7,		// rPlLevel
            PlNeckPos = 0x22B2A2A2,		// rPlNeckPos
            stm = 0x72821C38,		// rPlStamina
            plw = 0x6F302481,		// rPlWeight
            qct = 0x3BBA4E33,		// rQuestCtrlTbl
            qif = 0x05A36D08,		// rQuestInfinity
            qmk = 0x7DA64808,		// rQuestMarker
            qr = 0x31B81AA5,		// rQuestReward
            qsp = 0x3B350990,		// rQuestSudden
            rst = 0x0737E28B,		// rRegionStatus
            rnp = 0x0A74682F,		// rRomNoraPawn
            rpi = 0x63747AA7,		// rRomPawnInfo
            rpn = 0x76DE35F6,		// rRomPawnName
            shl = 0x619D23DF,		// rShopList
            skl = 0x50F3D713,		// rSkillList
            bgc = 0x5E33464C,		// rSoundBgmControl
            bmse = 0x4CA26828,		// rSoundMotionSe
            rvt = 0x039D71F2,		// rSoundReverbTable
            ssq = 0x271D08FE,		// rSoundSequenceSe
            ssc = 0x49B5A885,		// rSoundSimpleCurve
            smx_xml = 0x6E402C69,		// rSoundSubMixerXml
            sms = 0x39A0D1D6,		// rSoundSubMixerSet
            spn = 0x02373BA7,		// rStagePlaceName
            stp = 0x671F21DA,		// rStartPos
            statusparam = 0x215896C2,		// rStatusParam
            tmd = 0x04B4BE62,		// rTalkMotion
            tmn = 0x0D06BE6B,		// rTargetMotion
            tde = 0x6F62D575,		// rTexDetailEdit
            wep = 0x6186627D,		// rWeatherEffectParam
            wfp = 0x0525AEE2,		// rWeatherFogParam
            jex = 0x2282360D,       // rJointEx
            smx = 0x30FC745F        // rSoundSubMixer
        }

        // int to string
        public static void IntToString(int ext)
        {
            switch (ext)
            {
                case (int)Ext.gway: string_extension = "gway"; break;
                case (int)Ext.sdl: string_extension = "sdl"; break;
                case (int)Ext.stq: string_extension = "stq"; break;
                case (int)Ext.gmd: string_extension = "gmd"; break;
                case (int)Ext.arc: string_extension = "arc"; break;
                case (int)Ext.spc: string_extension = "spc"; break;
                case (int)Ext.sds: string_extension = "sds"; break;
                case (int)Ext.sky: string_extension = "sky"; break;
                case (int)Ext.stc: string_extension = "stc"; break;
                case (int)Ext.gr2s: string_extension = "gr2s"; break;
                case (int)Ext.srd: string_extension = "srd"; break;
                case (int)Ext.net: string_extension = "net"; break;
                case (int)Ext.tex: string_extension = "tex"; break;
                case (int)Ext.lmt: string_extension = "lmt"; break;
                case (int)Ext.scv_xml: string_extension = "scv.xml"; break;
                case (int)Ext.sps: string_extension = "sps"; break;
                case (int)Ext.cld: string_extension = "cld"; break;
                case (int)Ext.spr: string_extension = "spr"; break;
                case (int)Ext.srq: string_extension = "srq"; break;
                case (int)Ext.spj: string_extension = "spj"; break;
                case (int)Ext.sdc_xml: string_extension = "sdc.xml"; break;
                case (int)Ext.stex: string_extension = "stex"; break;
                case (int)Ext.rev: string_extension = "rev"; break;
                case (int)Ext._is: string_extension = "is"; break;
                case (int)Ext.mod: string_extension = "mod"; break;
                case (int)Ext.sbch: string_extension = "sbch"; break;
                case (int)Ext.rtex: string_extension = "rtex"; break;
                case (int)Ext.prp: string_extension = "prp"; break;
                case (int)Ext.gfd: string_extension = "gfd"; break;
                case (int)Ext.gii: string_extension = "gii"; break;
                case (int)Ext.zon: string_extension = "zon"; break;
                case (int)Ext.ctc: string_extension = "ctc"; break;
                case (int)Ext.sew: string_extension = "sew"; break;
                case (int)Ext.sngw: string_extension = "sngw"; break;
                case (int)Ext.envw: string_extension = "envw"; break;
                case (int)Ext.xsew: string_extension = "xsew"; break;
                case (int)Ext.mem_wmv: string_extension = "mem.wmv"; break;
                case (int)Ext.wmv: string_extension = "wmv"; break;
                case (int)Ext.scs: string_extension = "scs"; break;
                case (int)Ext.equ: string_extension = "equ"; break;
                case (int)Ext.rdd: string_extension = "rdd"; break;
                case (int)Ext.chn: string_extension = "chn"; break;
                case (int)Ext.ccl: string_extension = "ccl"; break;
                case (int)Ext.ik: string_extension = "ik"; break;
                case (int)Ext.gui: string_extension = "gui"; break;
                case (int)Ext.geo2: string_extension = "geo2"; break;
                case (int)Ext.vib: string_extension = "vib"; break;
                case (int)Ext.nav: string_extension = "nav"; break;
                case (int)Ext.sbc: string_extension = "sbc"; break;
                case (int)Ext.fcp: string_extension = "fcp"; break;
                case (int)Ext.pcf: string_extension = "pcf"; break;
                case (int)Ext.fsl: string_extension = "fsl"; break;
                case (int)Ext.rbd: string_extension = "rbd"; break;
                case (int)Ext.spl: string_extension = "spl"; break;
                case (int)Ext.dwm: string_extension = "dwm"; break;
                case (int)Ext.lcm: string_extension = "lcm"; break;
                case (int)Ext.lcm_xml: string_extension = "lcm.xml"; break;
                case (int)Ext.fbik_human: string_extension = "fbik_human"; break;
                case (int)Ext.mrl: string_extension = "mrl"; break;
                case (int)Ext.fca: string_extension = "fca"; break;
                case (int)Ext.swm: string_extension = "swm"; break;
                case (int)Ext.e2d: string_extension = "e2d"; break;
                case (int)Ext.efl: string_extension = "efl"; break;
                case (int)Ext.sss_xml: string_extension = "sss.xml"; break;
                case (int)Ext.obc: string_extension = "obc"; break;
                case (int)Ext.lim: string_extension = "lim"; break;
                case (int)Ext.grs: string_extension = "grs"; break;
                case (int)Ext.gpt: string_extension = "gpt"; break;
                case (int)Ext.mtx: string_extension = "mtx"; break;
                case (int)Ext.tik: string_extension = "tik"; break;
                case (int)Ext.jof: string_extension = "jof"; break;
                case (int)Ext.par: string_extension = "par"; break;
                case (int)Ext.pan: string_extension = "pan"; break;
                case (int)Ext.mst: string_extension = "mst"; break;
                case (int)Ext.mst_xml: string_extension = "mst.xml"; break;
                case (int)Ext.scl: string_extension = "scl"; break;
                case (int)Ext.lat: string_extension = "lat"; break;
                case (int)Ext.ais: string_extension = "ais"; break;
                case (int)Ext.ean: string_extension = "ean"; break;
                case (int)Ext.efs: string_extension = "efs"; break;
                case (int)Ext.vts: string_extension = "vts"; break;
                case (int)Ext.nls: string_extension = "nls"; break;
                case (int)Ext.grw: string_extension = "grw"; break;
                case (int)Ext.are: string_extension = "are"; break;
                case (int)Ext.are_xml: string_extension = "are.xml"; break;
                case (int)Ext.way: string_extension = "way"; break;
                case (int)Ext.hul: string_extension = "hul"; break;
                case (int)Ext.dpth: string_extension = "dpth"; break;
                case (int)Ext.geog: string_extension = "geog"; break;
                case (int)Ext.geo3: string_extension = "geo3"; break;
                case (int)Ext.ddfcv: string_extension = "ddfcv"; break;
                case (int)Ext.ddfcv_v4: string_extension = "ddfcv_v4"; break;
                case (int)Ext.cit: string_extension = "cit"; break;
                case (int)Ext.irp: string_extension = "irp"; break;
                case (int)Ext.cpl: string_extension = "cpl"; break;
                case (int)Ext.ajp: string_extension = "ajp"; break;
                case (int)Ext.ahc: string_extension = "ahc"; break;
                case (int)Ext.eap: string_extension = "eap"; break;
                case (int)Ext.gop: string_extension = "gop"; break;
                case (int)Ext.AIPlActParam: string_extension = "AIPlActParam"; break;
                case (int)Ext.pci: string_extension = "pci"; break;
                case (int)Ext.pcs: string_extension = "pcs"; break;
                case (int)Ext.prt: string_extension = "prt"; break;
                case (int)Ext.sn2: string_extension = "sn2"; break;
                case (int)Ext.stg: string_extension = "stg"; break;
                case (int)Ext.sap: string_extension = "sap"; break;
                case (int)Ext.ahs: string_extension = "ahs"; break;
                case (int)Ext.amr: string_extension = "amr"; break;
                case (int)Ext.nmr: string_extension = "nmr"; break;
                case (int)Ext.aor: string_extension = "aor"; break;
                case (int)Ext.atr: string_extension = "atr"; break;
                case (int)Ext.ntr: string_extension = "ntr"; break;
                case (int)Ext.bll: string_extension = "bll"; break;
                case (int)Ext.bed: string_extension = "bed"; break;
                case (int)Ext.bap: string_extension = "bap"; break;
                case (int)Ext.cql: string_extension = "cql"; break;
                case (int)Ext.gce: string_extension = "gce"; break;
                case (int)Ext.cmc: string_extension = "cmc"; break;
                case (int)Ext.cnsshake: string_extension = "cnsshake"; break;
                case (int)Ext.edc: string_extension = "edc"; break;
                case (int)Ext.epd: string_extension = "epd"; break;
                case (int)Ext.edp: string_extension = "edp"; break;
                case (int)Ext.epv: string_extension = "epv"; break;
                case (int)Ext.esp: string_extension = "esp"; break;
                case (int)Ext.qlv: string_extension = "qlv"; break;
                case (int)Ext.fed: string_extension = "fed"; break;
                case (int)Ext.fpe: string_extension = "fpe"; break;
                case (int)Ext.cpf: string_extension = "cpf"; break;
                case (int)Ext.hed: string_extension = "hed"; break;
                case (int)Ext.hpe: string_extension = "hpe"; break;
                case (int)Ext.FBIKParam: string_extension = "FBIKParam"; break;
                case (int)Ext.itemlv: string_extension = "itemlv"; break;
                case (int)Ext.itl: string_extension = "itl"; break;
                case (int)Ext.imx: string_extension = "imx"; break;
                case (int)Ext.ist: string_extension = "ist"; break;
                case (int)Ext.lot: string_extension = "lot"; break;
                case (int)Ext.lgp: string_extension = "lgp"; break;
                case (int)Ext.gpl: string_extension = "gpl"; break;
                case (int)Ext.lsp: string_extension = "lsp"; break;
                case (int)Ext.mlb: string_extension = "mlb"; break;
                case (int)Ext.lku: string_extension = "lku"; break;
                case (int)Ext.ltg: string_extension = "ltg"; break;
                case (int)Ext.map: string_extension = "map"; break;
                case (int)Ext.mia: string_extension = "mia"; break;
                case (int)Ext.mcp: string_extension = "mcp"; break;
                case (int)Ext.mlm: string_extension = "mlm"; break;
                case (int)Ext.msl: string_extension = "msl"; break;
                case (int)Ext.mss: string_extension = "mss"; break;
                case (int)Ext.nck: string_extension = "nck"; break;
                case (int)Ext.nnl: string_extension = "nnl"; break;
                case (int)Ext.ocl: string_extension = "ocl"; break;
                case (int)Ext.oml: string_extension = "oml"; break;
                case (int)Ext.olp: string_extension = "olp"; break;
                case (int)Ext.ablparam: string_extension = "ablparam"; break;
                case (int)Ext.PlDefendParam: string_extension = "PlDefendParam"; break;
                case (int)Ext.plexp: string_extension = "plexp"; break;
                case (int)Ext.joblvl: string_extension = "joblvl"; break;
                case (int)Ext.pjp: string_extension = "pjp"; break;
                case (int)Ext.lvl: string_extension = "lvl"; break;
                case (int)Ext.PlNeckPos: string_extension = "PlNeckPos"; break;
                case (int)Ext.stm: string_extension = "stm"; break;
                case (int)Ext.plw: string_extension = "plw"; break;
                case (int)Ext.qct: string_extension = "qct"; break;
                case (int)Ext.qif: string_extension = "qif"; break;
                case (int)Ext.qmk: string_extension = "qmk"; break;
                case (int)Ext.qr: string_extension = "qr"; break;
                case (int)Ext.qsp: string_extension = "qsp"; break;
                case (int)Ext.rst: string_extension = "rst"; break;
                case (int)Ext.rnp: string_extension = "rnp"; break;
                case (int)Ext.rpi: string_extension = "rpi"; break;
                case (int)Ext.rpn: string_extension = "rpn"; break;
                case (int)Ext.shl: string_extension = "shl"; break;
                case (int)Ext.skl: string_extension = "skl"; break;
                case (int)Ext.bgc: string_extension = "bgc"; break;
                case (int)Ext.bmse: string_extension = "bmse"; break;
                case (int)Ext.rvt: string_extension = "rvt"; break;
                case (int)Ext.ssq: string_extension = "ssq"; break;
                case (int)Ext.ssc: string_extension = "ssc"; break;
                case (int)Ext.smx_xml: string_extension = "smx.xml"; break;
                case (int)Ext.sms: string_extension = "sms"; break;
                case (int)Ext.spn: string_extension = "spn"; break;
                case (int)Ext.stp: string_extension = "stp"; break;
                case (int)Ext.statusparam: string_extension = "statusparam"; break;
                case (int)Ext.tmd: string_extension = "tmd"; break;
                case (int)Ext.tmn: string_extension = "tmn"; break;
                case (int)Ext.tde: string_extension = "tde"; break;
                case (int)Ext.wep: string_extension = "wep"; break;
                case (int)Ext.wfp: string_extension = "wfp"; break;
                case (int)Ext.jex: string_extension = "jex"; break;
                case (int)Ext.smx: string_extension = "smx"; break;

                default:
                    string_extension = "" + ext.ToString("X4"); break;
            }
        }

        // string to int
        public static int StringToInt(string ext)
        {
            switch (ext)
            {
                case "gway": int_extension = (int)Ext.gway; break;
                case "sdl": int_extension = (int)Ext.sdl; break;
                case "stq": int_extension = (int)Ext.stq; break;
                case "gmd": int_extension = (int)Ext.gmd; break;
                case "arc": int_extension = (int)Ext.arc; break;
                case "spc": int_extension = (int)Ext.spc; break;
                case "sds": int_extension = (int)Ext.sds; break;
                case "sky": int_extension = (int)Ext.sky; break;
                case "stc": int_extension = (int)Ext.stc; break;
                case "gr2s": int_extension = (int)Ext.gr2s; break;
                case "srd": int_extension = (int)Ext.srd; break;
                case "net": int_extension = (int)Ext.net; break;
                case "tex": int_extension = (int)Ext.tex; break;
                case "lmt": int_extension = (int)Ext.lmt; break;
                case "scv.xml": int_extension = (int)Ext.scv_xml; break;
                case "sps": int_extension = (int)Ext.sps; break;
                case "cld": int_extension = (int)Ext.cld; break;
                case "spr": int_extension = (int)Ext.spr; break;
                case "srq": int_extension = (int)Ext.srq; break;
                case "spj": int_extension = (int)Ext.spj; break;
                case "sdc.xml": int_extension = (int)Ext.sdc_xml; break;
                case "stex": int_extension = (int)Ext.stex; break;
                case "rev": int_extension = (int)Ext.rev; break;
                case "is": int_extension = (int)Ext._is; break;
                case "mod": int_extension = (int)Ext.mod; break;
                case "sbch": int_extension = (int)Ext.sbch; break;
                case "rtex": int_extension = (int)Ext.rtex; break;
                case "prp": int_extension = (int)Ext.prp; break;
                case "gfd": int_extension = (int)Ext.gfd; break;
                case "gii": int_extension = (int)Ext.gii; break;
                case "zon": int_extension = (int)Ext.zon; break;
                case "ctc": int_extension = (int)Ext.ctc; break;
                case "sew": int_extension = (int)Ext.sew; break;
                case "sngw": int_extension = (int)Ext.sngw; break;
                case "envw": int_extension = (int)Ext.envw; break;
                case "xsew": int_extension = (int)Ext.xsew; break;
                case "mem.wmv": int_extension = (int)Ext.mem_wmv; break;
                case "wmv": int_extension = (int)Ext.wmv; break;
                case "scs": int_extension = (int)Ext.scs; break;
                case "equ": int_extension = (int)Ext.equ; break;
                case "rdd": int_extension = (int)Ext.rdd; break;
                case "chn": int_extension = (int)Ext.chn; break;
                case "ccl": int_extension = (int)Ext.ccl; break;
                case "ik": int_extension = (int)Ext.ik; break;
                case "gui": int_extension = (int)Ext.gui; break;
                case "geo2": int_extension = (int)Ext.geo2; break;
                case "vib": int_extension = (int)Ext.vib; break;
                case "nav": int_extension = (int)Ext.nav; break;
                case "sbc": int_extension = (int)Ext.sbc; break;
                case "fcp": int_extension = (int)Ext.fcp; break;
                case "pcf": int_extension = (int)Ext.pcf; break;
                case "fsl": int_extension = (int)Ext.fsl; break;
                case "rbd": int_extension = (int)Ext.rbd; break;
                case "spl": int_extension = (int)Ext.spl; break;
                case "dwm": int_extension = (int)Ext.dwm; break;
                case "lcm": int_extension = (int)Ext.lcm; break;
                case "lcm.xml": int_extension = (int)Ext.lcm_xml; break;
                case "fbik_human": int_extension = (int)Ext.fbik_human; break;
                case "mrl": int_extension = (int)Ext.mrl; break;
                case "fca": int_extension = (int)Ext.fca; break;
                case "swm": int_extension = (int)Ext.swm; break;
                case "e2d": int_extension = (int)Ext.e2d; break;
                case "efl": int_extension = (int)Ext.efl; break;
                case "sss.xml": int_extension = (int)Ext.sss_xml; break;
                case "obc": int_extension = (int)Ext.obc; break;
                case "lim": int_extension = (int)Ext.lim; break;
                case "grs": int_extension = (int)Ext.grs; break;
                case "gpt": int_extension = (int)Ext.gpt; break;
                case "mtx": int_extension = (int)Ext.mtx; break;
                case "tik": int_extension = (int)Ext.tik; break;
                case "jof": int_extension = (int)Ext.jof; break;
                case "par": int_extension = (int)Ext.par; break;
                case "pan": int_extension = (int)Ext.pan; break;
                case "mst": int_extension = (int)Ext.mst; break;
                case "mst.xml": int_extension = (int)Ext.mst_xml; break;
                case "scl": int_extension = (int)Ext.scl; break;
                case "lat": int_extension = (int)Ext.lat; break;
                case "ais": int_extension = (int)Ext.ais; break;
                case "ean": int_extension = (int)Ext.ean; break;
                case "efs": int_extension = (int)Ext.efs; break;
                case "vts": int_extension = (int)Ext.vts; break;
                case "nls": int_extension = (int)Ext.nls; break;
                case "grw": int_extension = (int)Ext.grw; break;
                case "are": int_extension = (int)Ext.are; break;
                case "are.xml": int_extension = (int)Ext.are_xml; break;
                case "way": int_extension = (int)Ext.way; break;
                case "hul": int_extension = (int)Ext.hul; break;
                case "dpth": int_extension = (int)Ext.dpth; break;
                case "geog": int_extension = (int)Ext.geog; break;
                case "geo3": int_extension = (int)Ext.geo3; break;
                case "ddfcv": int_extension = (int)Ext.ddfcv; break;
                case "ddfcv_v4": int_extension = (int)Ext.ddfcv_v4; break;
                case "cit": int_extension = (int)Ext.cit; break;
                case "irp": int_extension = (int)Ext.irp; break;
                case "cpl": int_extension = (int)Ext.cpl; break;
                case "ajp": int_extension = (int)Ext.ajp; break;
                case "ahc": int_extension = (int)Ext.ahc; break;
                case "eap": int_extension = (int)Ext.eap; break;
                case "gop": int_extension = (int)Ext.gop; break;
                case "AIPlActParam": int_extension = (int)Ext.AIPlActParam; break;
                case "pci": int_extension = (int)Ext.pci; break;
                case "pcs": int_extension = (int)Ext.pcs; break;
                case "prt": int_extension = (int)Ext.prt; break;
                case "sn2": int_extension = (int)Ext.sn2; break;
                case "stg": int_extension = (int)Ext.stg; break;
                case "sap": int_extension = (int)Ext.sap; break;
                case "ahs": int_extension = (int)Ext.ahs; break;
                case "amr": int_extension = (int)Ext.amr; break;
                case "nmr": int_extension = (int)Ext.nmr; break;
                case "aor": int_extension = (int)Ext.aor; break;
                case "atr": int_extension = (int)Ext.atr; break;
                case "ntr": int_extension = (int)Ext.ntr; break;
                case "bll": int_extension = (int)Ext.bll; break;
                case "bed": int_extension = (int)Ext.bed; break;
                case "bap": int_extension = (int)Ext.bap; break;
                case "cql": int_extension = (int)Ext.cql; break;
                case "gce": int_extension = (int)Ext.gce; break;
                case "cmc": int_extension = (int)Ext.cmc; break;
                case "cnsshake": int_extension = (int)Ext.cnsshake; break;
                case "edc": int_extension = (int)Ext.edc; break;
                case "epd": int_extension = (int)Ext.epd; break;
                case "edp": int_extension = (int)Ext.edp; break;
                case "epv": int_extension = (int)Ext.epv; break;
                case "esp": int_extension = (int)Ext.esp; break;
                case "qlv": int_extension = (int)Ext.qlv; break;
                case "fed": int_extension = (int)Ext.fed; break;
                case "fpe": int_extension = (int)Ext.fpe; break;
                case "cpf": int_extension = (int)Ext.cpf; break;
                case "hed": int_extension = (int)Ext.hed; break;
                case "hpe": int_extension = (int)Ext.hpe; break;
                case "FBIKParam": int_extension = (int)Ext.FBIKParam; break;
                case "itemlv": int_extension = (int)Ext.itemlv; break;
                case "itl": int_extension = (int)Ext.itl; break;
                case "imx": int_extension = (int)Ext.imx; break;
                case "ist": int_extension = (int)Ext.ist; break;
                case "lot": int_extension = (int)Ext.lot; break;
                case "lgp": int_extension = (int)Ext.lgp; break;
                case "gpl": int_extension = (int)Ext.gpl; break;
                case "lsp": int_extension = (int)Ext.lsp; break;
                case "mlb": int_extension = (int)Ext.mlb; break;
                case "lku": int_extension = (int)Ext.lku; break;
                case "ltg": int_extension = (int)Ext.ltg; break;
                case "map": int_extension = (int)Ext.map; break;
                case "mia": int_extension = (int)Ext.mia; break;
                case "mcp": int_extension = (int)Ext.mcp; break;
                case "mlm": int_extension = (int)Ext.mlm; break;
                case "msl": int_extension = (int)Ext.msl; break;
                case "mss": int_extension = (int)Ext.mss; break;
                case "nck": int_extension = (int)Ext.nck; break;
                case "nnl": int_extension = (int)Ext.nnl; break;
                case "ocl": int_extension = (int)Ext.ocl; break;
                case "oml": int_extension = (int)Ext.oml; break;
                case "olp": int_extension = (int)Ext.olp; break;
                case "ablparam": int_extension = (int)Ext.ablparam; break;
                case "PlDefendParam": int_extension = (int)Ext.PlDefendParam; break;
                case "plexp": int_extension = (int)Ext.plexp; break;
                case "joblvl": int_extension = (int)Ext.joblvl; break;
                case "pjp": int_extension = (int)Ext.pjp; break;
                case "lvl": int_extension = (int)Ext.lvl; break;
                case "PlNeckPos": int_extension = (int)Ext.PlNeckPos; break;
                case "stm": int_extension = (int)Ext.stm; break;
                case "plw": int_extension = (int)Ext.plw; break;
                case "qct": int_extension = (int)Ext.qct; break;
                case "qif": int_extension = (int)Ext.qif; break;
                case "qmk": int_extension = (int)Ext.qmk; break;
                case "qr": int_extension = (int)Ext.qr; break;
                case "qsp": int_extension = (int)Ext.qsp; break;
                case "rst": int_extension = (int)Ext.rst; break;
                case "rnp": int_extension = (int)Ext.rnp; break;
                case "rpi": int_extension = (int)Ext.rpi; break;
                case "rpn": int_extension = (int)Ext.rpn; break;
                case "shl": int_extension = (int)Ext.shl; break;
                case "skl": int_extension = (int)Ext.skl; break;
                case "bgc": int_extension = (int)Ext.bgc; break;
                case "bmse": int_extension = (int)Ext.bmse; break;
                case "rvt": int_extension = (int)Ext.rvt; break;
                case "ssq": int_extension = (int)Ext.ssq; break;
                case "ssc": int_extension = (int)Ext.ssc; break;
                case "smx.xml": int_extension = (int)Ext.smx_xml; break;
                case "sms": int_extension = (int)Ext.sms; break;
                case "spn": int_extension = (int)Ext.spn; break;
                case "stp": int_extension = (int)Ext.stp; break;
                case "statusparam": int_extension = (int)Ext.statusparam; break;
                case "tmd": int_extension = (int)Ext.tmd; break;
                case "tmn": int_extension = (int)Ext.tmn; break;
                case "tde": int_extension = (int)Ext.tde; break;
                case "wep": int_extension = (int)Ext.wep; break;
                case "wfp": int_extension = (int)Ext.wfp; break;
                case "jex": int_extension = (int)Ext.jex; break;
                case "smx": int_extension = (int)Ext.smx; break;

                default:
                    int_extension = Convert.ToInt32(ext, 16); break;
            }
            return int_extension;
        }
    }
}
